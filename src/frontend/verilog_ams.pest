//PREPROCESSOR
TOK_COMPILER_DIRECTIVE_START = _{"`"}
TOK_IFDEF=@{"ifdef"}
TOK_IFNDET=@{"ifndet"}
TOK_ELSIF=@{"elsif"}
TOK_ENDIF=@{"endif"}
TOK_DEFINE=@{"define"}

PREPROCESSOR = ${SOI~COMPILER_DIRECTIVE_OR_CODE*~EOI}
COMPILER_DIRECTIVE_OR_CODE = ${TOK_COMPILER_DIRECTIVE_START~COMPILER_DIRECTIVE|CODE}

CODE = @{(LETTER|NUMBER|NEWLINE|SPACE_SEPARATOR|!TOK_COMPILER_DIRECTIVE_START~SYMBOL)+}

//TODO OTHER PREDEFINED COMPILER DIRECTIVES
COMPILER_DIRECTIVE={MACRO_DEFINITION|MACRO_REFERENCE}


MACRO_DEFINITION = ${TOK_DEFINE~WHITE_SPACE~IDENTIFIER~("("~MACRO_ARGUMENT_LIST_DEFINITION~")")?~MACRO_DEFINITION_BODY?~DROP*}
    MACRO_ARGUMENT_LIST_DEFINITION = {PUSH(SIMPLE_IDENTIFIER)~(","~PUSH(SIMPLE_IDENTIFIER))*}
    MACRO_DEFINITION_BODY = ${MACRO_DEFINTION_LINE~(NEWLINE~"\\"~MACRO_DEFINTION_LINE)*}
    MACRO_DEFINTION_LINE =${(PEEK_ALL|TOK_COMPILER_DIRECTIVE_START~COMPILER_DIRECTIVE|MACRO_CODE)*}
    MACRO_CODE = @{(!PEEK_ALL~(LETTER|NUMBER|!TOK_COMPILER_DIRECTIVE_START~SYMBOL))+}

MACRO_REFERENCE=${IDENTIFIER~("("~MACRO_ARGUMENT_LIST~")")?}
    MACRO_ARGUMENT_LIST={EXPRESSION~(","~EXPRESSION)*}
MACRO_CONDITION=${(TOK_IFDEF|TOK_IFNDET)~WHITE_SPACE~IDENTIFIER~NEWLINE~COMPILER_DIRECTIVE_OR_CODE+
    ~(NEWLINE~TOK_COMPILER_DIRECTIVE_START~TOK_ELSIF~WHITE_SPACE~IDENTIFIER~NEWLINE~COMPILER_DIRECTIVE_OR_CODE+)*
    ~(NEWLINE~TOK_COMPILER_DIRECTIVE_START~TOK_ELSE~WHITE_SPACE~IDENTIFIER~NEWLINE~COMPILER_DIRECTIVE_OR_CODE+)?
    ~NEWLINE~TOK_ENDIF}



WHITESPACE = _{ SPACE_SEPARATOR|NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

//keywords
TOK_MODULE = @{"macromodule"|"connectmodule"|"module"}
TOK_ENDMODULE = @{"endmodule"}

TOK_BRANCH = @{"branhc"}
TOK_PARAMETER  = @{"parameter"}
TOK_LOCALPARAM =  @{"localparam" }
TOK_DEFPARAM = @{"defparam"}
TOK_ALIASPARAM = @{"aliasparam"}

TOK_ANALOG = @{"analog"}
TOK_INITIAL = @{"initial"}
TOK_BEGIN = @{"begin"}
TOK_END = @{"end"}

TOK_IF = @{"if"}
TOK_ELSE = @{"else"}
TOK_ENDCASE = @{"endcase"}
TOK_CASE = @{"case"~("z"|"x")?}
TOK_DEFAULT = @{"endcase"}

TOK_FOR = @{"for"}
TOK_WHILE = @{"while"}

TOK_IN= @{"input"}
TOK_INOUT= @{"inout"}
TOK_OUT= @{"output"}

TOK_SIGNED= @{"signed"}
TOK_VEKTORED = @{"vectored"}
TOK_SCALARED = @{"scalared"}


TOK_TIME= @{"time"}
TOK_REALTIME= @{"realtime"}
TOK_INTEGER= @{"integer"}
TOK_REAL= @{"real"}

TOK_REG=@{"reg"}
TOK_WREAL= @{"wreal"}
TOK_SUPPLY0=@{"supply0"}
TOK_SUPPLY1=@{"supply1"}
TOK_TRI=@{"tri"}
TOK_TRIAND=@{"triand"}
TOK_TRIOR=@{"trior"}
TOK_TRI0=@{"tri0"}
TOK_TRI1=@{"tri1"}
TOK_WIRE=@{"wire"}
TOK_UWIRE=@{"uwire"}
TOK_WAND=@{"wand"}
TOK_WOR=@{"wor"}
TOK_TRIREG=@{"trireg"}
TOK_GROUND=@{"ground"}
TOK_EVENT=@{"event"}

TOK_POTENTIAL = @{"potential"}
TOK_FLOW = @{"flow"}


TOK_TIME_DERIVATIVE = @{"ddt"}
TOK_PARTIAL_DERIVATIVE = @{"ddx"}
TOK_TIME_INTEGRAL = @{"idt"}
TOK_TIME_INTEGRAL_MODULUS = @{"idtmod"}


KEYWORD = @{TOK_MODULE|TOK_ENDMODULE|
TOK_BRANCH|TOK_PARAMETER|TOK_LOCALPARAM|TOK_DEFPARAM|TOK_ALIASPARAM
|TOK_ANALOG|TOK_INITIAL|TOK_BEGIN|TOK_END|
TOK_CASE|TOK_IF|TOK_ELSE|TOK_FOR|TOK_WHILE|
TOK_IN|TOK_OUT|TOK_INOUT|TOK_SIGNED|
TOK_WREAL|TOK_SUPPLY0|TOK_SUPPLY1|TOK_TRI|TOK_TRIAND|TOK_TRIOR|TOK_TRI0|TOK_TRI1|TOK_WIRE|TOK_UWIRE|TOK_WAND|TOK_WOR|
TOK_INTEGER|TOK_REG|TOK_REAL|TOK_REALTIME|TOK_TRIREG|TOK_GROUND|
TOK_POTENTIAL|TOK_FLOW|
TOK_TIME_DERIVATIVE|TOK_PARTIAL_DERIVATIVE|TOK_TIME_INTEGRAL|TOK_TIME_INTEGRAL_MODULUS
}
IDENTIFIER=@{"\\" ~ (NUMBER|LETTER_NUMBER|SYMBOL|PUNCTUATION)+ ~WHITE_SPACE|SIMPLE_IDENTIFIER}
SIMPLE_IDENTIFIER=@{KEYWORD~(LETTER|NUMBER|"_"|"$")+|!KEYWORD ~ (LETTER|"_") ~ (LETTER|NUMBER|"_"|"$")*}
HIERACHICAL_ID={IDENTIFIER}
IDENTIFIER_LIST = {IDENTIFIER~(","~IDENTIFIER)*}
VARIABEL_IDENTIFIER_LIST = {IDENTIFIER~("="~CONSTANT_EXPRESSION)?~(","~IDENTIFIER~("="~CONSTANT_EXPRESSION)?)*}


EXP = @{"e"|"E"}
SCALE_FACTOR = @{"T"|"G"|"M"|"K"|"k"|"m"|"u"|"p"|"f"|"a"}
SIGN = @{"+"|"-"}
IGNORE_UNDERSCORE = _{"_"}
UNSIGNED_NUMBER = @{ASCII_DIGIT~(IGNORE_UNDERSCORE|ASCII_DIGIT)*}
REAL_NUMBER = @{UNSIGNED_NUMBER~(
"."~UNSIGNED_NUMBER
|("."~UNSIGNED_NUMBER)?~(SCALE_FACTOR|EXP~SIGN?~UNSIGNED_NUMBER)
)}

ATTRIBUTE = {"(*" ~ ATTRIBUTE_SPEC ~ (","~ATTRIBUTE_SPEC)*~"*)"}
ATTRIBUTE_SPEC = {IDENTIFIER~  ("="~CONSTANT_EXPRESSION)? }

NET_TYPE = {TOK_SUPPLY0|TOK_SUPPLY1|TOK_TRI|TOK_TRIAND|TOK_TRIOR
    |TOK_TRI0|TOK_TRI1|TOK_WIRE|TOK_UWIRE|TOK_WAND|TOK_WOR}

VERILOG_AMS = {SOI ~ (MODULE)* ~ EOI}


MODULE = {ATTRIBUTE* ~ TOK_MODULE ~ IDENTIFIER~ PARAMETER_DECLERATION_LIST? ~(
"("~PORT_LIST~")"~";" ~ (MODULE_ITEM|PORT_DECLARATION~";")*
|("("~PORT_DECLARATION_LIST~")")?~";" ~ MODULE_ITEM*
)~ TOK_ENDMODULE}
    //TODO GENERATE,SPECIFY,SPECPARAM;ALIASPARAM
    MODULE_ITEM = {MODULE_OR_GENERATE_ITEM|ATTRIBUTE* ~ PARAMETER_DECLERATION~";"}

MODULE_OR_GENERATE_ITEM = {
    ATTRIBUTE* ~ (ANALOG|VARIABEL_DECLERATION)
}

BEHAVIORAL_STMT = {
    TIMING_CONTROL|CONDITONAL_STATEMENT|CASE_STATEMENT|SEQ_BLOCK|CONTRIBUTE_STMT|INDIREKT_CONTRIBUTE_STMT|CONSTANT_EXPRESSION
}
    //general
    SEQ_BLOCK = {TOK_BEGIN
        ~(":"~IDENTIFIER~(ATTRIBUTE* ~ (PARAMETER_DECLERATION~";"|INTEGER_DECLERATION|REAL_DECLERATION))*  )?
        ~ BEHAVIORAL_STMT ~ TOK_END
    }
    //TODO DIMESION/ARRAYINIT
    //TODO REMOVE WHITESPACE AND ACCOUNT FOR GREED
    VARIABEL_DECLERATION = {
        ((NET_TYPE|TOK_TRIREG|TOK_WREAL|TOK_GROUND|TOK_REG)~WHITE_SPACE~(IDENTIFIER~WHITE_SPACE)?|IDENTIFIER~WHITE_SPACE)
        ~((CHARGE_STRENGTH|DRIVE_STRENGTH)~WHITE_SPACE)?~(TOK_SIGNED~WHITE_SPACE)? ~ (IDENTIFIER_LIST|VARIABEL_IDENTIFIER_LIST)
        | (TOK_REAL|TOK_INTEGER|TOK_TIME|TOK_REALTIME|TOK_EVENT) ~WHITE_SPACE~VARIABEL_IDENTIFIER_LIST
    }
    DRIVE_STRENGTH = {"TODO"}
    CHARGE_STRENGTH = {"TODO"}

    CONDITONAL_STATEMENT = {
        TOK_IF ~ "("~EXPRESSION~")"~BEHAVIORAL_STMT
        ~ (TOK_ELSE ~ TOK_IF ~ "("~EXPRESSION~")"~BEHAVIORAL_STMT)*
        ~(TOK_ELSE ~ BEHAVIORAL_STMT)?
    }
    CASE_STATEMENT = {
        TOK_CASE ~ "("~EXPRESSION~")"~CASE_ITEM+ ~ TOK_ENDCASE
    }
        CASE_ITEM = {
            (TOK_DEFAULT ~ ":"?|EXPRESSION~(","~EXPRESSION)*~":")~BEHAVIORAL_STMT
        }

    TIMING_CONTROL = {
            (DELAY_CONTROL | EVENT_CONTROL) ~ BEHAVIORAL_STMT
        }
            EVENT_CONTROL = {
                "@"~(HIERACHICAL_ID|"*"|"("~("*"|EVENT_EXPRESSION)~")")
            }
    //analog
    ANALOG = { TOK_ANALOG ~ (TOK_INITIAL ~ BEHAVIORAL_STMT|BEHAVIORAL_STMT)}

    CONTRIBUTE_STMT = {
        BRANCH_LVALUE~"<+"~EXPRESSION~";"
    }
        BRANCH_LVALUE = {
        NATURE_ACCESS ~ BRANCH_IDENTIFIER
        }
        BRANCH_IDENTIFIER = {
            "("~ HIERACHICAL_ID ~ SINGEL_RANGE? ~ (","~ HIERACHICAL_ID ~ SINGEL_RANGE?)?~")"
        }
        PORT_BRANCH_IDENTIFIER = {
            "(<" ~ HIERACHICAL_ID ~ SINGEL_RANGE? ~">)"
        }
        NATURE_ACCESS = {
            TOK_POTENTIAL|TOK_FLOW|IDENTIFIER
        }

    INDIREKT_CONTRIBUTE_STMT = {
           BRANCH_LVALUE ~ ":" ~ (INDIREKT_EXPRESSION) ~ "==" ~ EXPRESSION ~ ";"
       }
        INDIREKT_EXPRESSION = {
            BRANCH_RVALUE
            | TOK_TIME_DERIVATIVE ~ "(" ~BRANCH_RVALUE ~ (","~CONSTANT_EXPRESSION)?~")"
            | TOK_TIME_INTEGRAL_MODULUS ~ "(" ~BRANCH_RVALUE ~ (","~EXPRESSION){0,4}~")"
            | TOK_TIME_INTEGRAL ~ "(" ~BRANCH_RVALUE ~ (","~EXPRESSION){0,3}~")"
        }

        BRANCH_RVALUE = {
            NATURE_ACCESS ~ (PORT_BRANCH_IDENTIFIER|BRANCH_IDENTIFIER)
        }
    BRANCH_DECLERATION = {
        TOK_BRANCH~(BRANCH_IDENTIFIER|PORT_BRANCH_IDENTIFIER) ~IDENTIFIER~(","~IDENTIFIER)*~";"
    }





    //digital
    DELAY_CONTROL = {"#"~(
        (REAL_NUMBER|UNSIGNED_NUMBER|IDENTIFIER)
        |"("~MINTYPEMAX_EXPRESSION~")"
    )}






//TODO check for unallowed decleration, allows wrong order.. enfroce?
PORT_DECLARATION =
    {ATTRIBUTE* ~ (TOK_INOUT|TOK_IN|TOK_OUT)
        ~(IDENTIFIER ~ (NET_TYPE|TOK_WREAL|TOK_SIGNED|RANGE_DECL)+ |IDENTIFIER ~ &IDENTIFIER|(NET_TYPE|TOK_WREAL|TOK_SIGNED|RANGE_DECL)*)
        ~IDENTIFIER_LIST
    | ATTRIBUTE* ~ TOK_OUT
        ~((IDENTIFIER)?~ TOK_REG ~ TOK_SIGNED? ~  RANGE_DECL?
        |TOK_INTEGER~TOK_TIME)
        ~ VARIABEL_IDENTIFIER_LIST}
    PORT_DECLARATION_LIST = {PORT_DECLARATION~(","~PORT_DECLARATION)*
}

PORT = {"."~IDENTIFIER~"("~PORT_EXPRESSION?~")"|IDENTIFIER~CONSTANT_RANGE?}
    PORT_EXPRESSION = {PORT_REFRENCE|"{"~PORT_REFRENCE~(","~PORT_REFRENCE)*~"}"}
    PORT_REFRENCE = {IDENTIFIER~CONSTANT_RANGE?}
    PORT_LIST={PORT~(","~PORT)*}



RANGE_DECL = {"["~ CONSTANT_EXPRESSION ~ ":"~CONSTANT_EXPRESSION ~"]"}
RANGE = { "["~(
    EXPRESSION
    |EXPRESSION ~ RANGE_SEPERATOR ~EXPRESSION
    )~"]"
}
    CONSTANT_RANGE = { "["~(
        CONSTANT_EXPRESSION
        |CONSTANT_EXPRESSION ~ RANGE_SEPERATOR ~CONSTANT_EXPRESSION
        )~"]"
    }
    RANGE_SEPERATOR = {
        ":"|":+"|":-"
    }
SINGEL_RANGE = {"["~CONSTANT_EXPRESSION~"]"}



//TODO
PARAMETER_DECLERATION = {TOK_PARAMETER}
    PARAMETER_DECLERATION_LIST={"#(" ~ PARAMETER_DECLERATION ~ ("," ~ PARAMETER_DECLERATION)* ~ ")"}

INTEGER_DECLERATION = {"TODO"}
REAL_DECLERATION = {"TODO"}

CONSTANT_EXPRESSION = {NUMBER+|"TODO"}
EXPRESSION = {"TODO"}
MINTYPEMAX_EXPRESSION = {EXPRESSION|EXPRESSION~":"~EXPRESSION~":"~EXPRESSION}
EVENT_EXPRESSION = {
EXPRESSION| "TODO" ~ EXPRESSION
}