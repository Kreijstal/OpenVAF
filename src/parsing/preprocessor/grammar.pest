
//  * ******************************************************************************************
//  * Copyright (c) 2019 Pascal Kuthe. This file is part of the VARF project.
//  * It is subject to the license terms in the LICENSE file found in the top-level directory
//  *  of this distribution and at  https://gitlab.com/jamescoding/VARF/blob/master/LICENSE.
//  *  No part of VARF, including this file, may be copied, modified, propagated, or
//  *  distributed except according to the terms contained in the LICENSE file.
//  * *******************************************************************************************



TOK_COMPILER_DIRECTIVE_START = _{"`"}
TOK_IFDEF=@{"ifdef"}
TOK_IFNDEF=@{"ifndef"}
TOK_ELSIF=_{TOK_COMPILER_DIRECTIVE_START~"elsif "}
TOK_ENDIF= _{TOK_COMPILER_DIRECTIVE_START~"endif"}
TOK_ELSEDEF=_{TOK_COMPILER_DIRECTIVE_START~TOK_ELSE}
TOK_DEFINE=_{"define"}
TOK_ELSE = _{"else"}
TOK_INCLUDE = _{"include"}

USED_MACROS={
    TOK_ELSE|"endif"|"elsif"|TOK_IFDEF|TOK_IFNDEF|TOK_DEFINE|TOK_IFDEF|TOK_INCLUDE
}
PREPROCESSOR = {SOI~BODY~EOI}
BODY = ${COMPILER_DIRECTIVE_OR_CODE*}
COMPILER_DIRECTIVE_OR_CODE = ${COMPILER_DIRECTIVE|IGNORE+|CODE}

CODE = @{(MEANINGFUL_CHAR)+}
MEANINGFUL_CHAR = @{!(TOK_COMPILER_DIRECTIVE_START|"//"|"/*"|IGNORE)~ANY}
//TODO OTHER PREDEFINED COMPILER DIRECTIVES
COMPILER_DIRECTIVE=${TOK_COMPILER_DIRECTIVE_START~(MACRO_REFERENCE|MACRO_DEFINITION|MACRO_CONDITION)}

MACRO_DEFINITION = !{TOK_DEFINE~IDENTIFIER
   ~("("~IDENTIFIER_LIST~")")?~MACRO_DEFINITION_BODY?}
    MACRO_DEFINITION_BODY = {MACRO_DEFINTION_LINE~("\\"~NEWLINE~MACRO_DEFINTION_LINE)*}
    MACRO_DEFINTION_LINE =${(IGNORE|COMPILER_DIRECTIVE|SIMPLE_IDENTIFIER|!("\\"|NEWLINE)~MEANINGFUL_CHAR)*}
MACRO_REFERENCE=!{!USED_MACROS~IDENTIFIER~("("~MACRO_ARGUMENT_LIST~")")?}
    MACRO_ARGUMENT_LIST={MACRO_ARGUMENT~(","~MACRO_ARGUMENT)*}
    MACRO_ARGUMENT = {("("~(MACRO_ARGUMENT|",")*~")"|SIMPLE_IDENTIFIER|!(")"|",")~MEANINGFUL_CHAR|COMPILER_DIRECTIVE)+}

MACRO_CONDITION=!{(TOK_IFDEF|TOK_IFNDEF)~IDENTIFIER~BODY
    ~(TOK_ELSIF~IDENTIFIER~BODY)*
    ~(TOK_ELSEDEF~BODY)?
    ~TOK_ENDIF}

INCLUDE=!{TOK_INCLUDE~"\""~STRING_LITERAL~"\""}

   IGNORE = _{COMMENT|UNNECESSARY_WHITESPACE}
   UNNECESSARY_WHITESPACE = _{((WHITESPACE)~&(WHITESPACE|NEWLINE)|NEWLINE~&NEWLINE)+}
   WHITESPACE = _{!(NEWLINE|LINE_SEPARATOR)~(CONTROL|SEPARATOR|FORMAT)}
   COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/"|"//"~(!NEWLINE~ANY)+ ~&NEWLINE}


IDENTIFIER_LIST = {IDENTIFIER~(","~IDENTIFIER)*}
IDENTIFIER=@{"\\" ~ (NUMBER|LETTER_NUMBER|SYMBOL|PUNCTUATION)+ ~WHITE_SPACE|SIMPLE_IDENTIFIER}
    SIMPLE_IDENTIFIER=@{(LETTER|"_") ~ (LETTER|NUMBER|"_"|"$")*}

    STRING_LITERAL = @{(LETTER|NUMBER|SPACE_SEPARATOR|"\\"~("t"|"n"|"\""|NUMBER{3}|"\\")|(!("\\"|"\"")~(SYMBOL|PUNCTUATION)))*}