# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog - OpenVAF OSDI\n
All notable changes to OpenVAF relevant to OSDI will be documented in this file.\n
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\n
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="verilogae-") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
## 0.6.0 - 2022-06-20

Initial release of VerilogAE as a library

<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://gitlab.com/DSPOM/OpenVAF/-/issues/${2}))"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = ".*\\(verilogae\\)", skip= true},
    { message = "^ci", skip= true},
    { message = "^doc", skip= true},
    { message = "^test", skip= true},
    { message = "^testing", skip= true},
    { message = "^chore\\(doc\\)", skip= true},
    { message = "chore\\(internal\\)", skip= true},
    { message = "chore\\(release\\)", skip= true},
    { message = "chore\\(dist\\)", skip= true},
    { message = "^.*: add", group = "Added"},
    { message = "^.*: support", group = "Added"},
    { message = "^.*: remove", group = "Removed"},
    { message = "^.*: delete", group = "Removed"},
    { message = "^fix", group = "Fixed"},
    { message = "^perf", group = "Changed"},
    { message = "^refactor", group = "Changed"},
    { message = "^feat", group = "Changed"},
    { message = "^ux", group = "Changed"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "verilogae-[0-9]*.[0-9]*.[0.9]*"
# regex for ignoring tags
ignore_tags = "osdi.*"
skip_tags = "verilogae-0.6.0"
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
