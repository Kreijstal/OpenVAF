xflags::xflags! {
    src "./src/flags.rs"

    /// Run custom build command.
    cmd xtask {
        default cmd help {
            /// Print help information.
            optional -h, --help
        }

        cmd vendor{
            optional --force
            optional --no_upload
        }

        cmd cache {
            cmd prepare{}
            cmd create{}
            cmd upload{}
            cmd fetch{}
            cmd update{}
        }

    }
}
// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Xtask {
    pub subcommand: XtaskCmd,
}

#[derive(Debug)]
pub enum XtaskCmd {
    Help(Help),
    Vendor(Vendor),
    Cache(Cache),
}

#[derive(Debug)]
pub struct Help {
    pub help: bool,
}

#[derive(Debug)]
pub struct Vendor {
    pub force: bool,
    pub no_upload: bool,
}

#[derive(Debug)]
pub struct Cache {
    pub subcommand: CacheCmd,
}

#[derive(Debug)]
pub enum CacheCmd {
    Prepare(Prepare),
    Create(Create),
    Upload(Upload),
    Fetch(Fetch),
    Update(Update),
}

#[derive(Debug)]
pub struct Prepare;

#[derive(Debug)]
pub struct Create;

#[derive(Debug)]
pub struct Upload;

#[derive(Debug)]
pub struct Fetch;

#[derive(Debug)]
pub struct Update;

impl Xtask {
    pub const HELP: &'static str = Self::HELP_;

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
