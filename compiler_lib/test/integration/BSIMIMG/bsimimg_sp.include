// ****************************************************************************
// *  BSIM-IMG 102.9.1 released by Pragya Kushwaha on 11/21/2017              *
// *  BSIM Independent Multi-Gate Model (Verilog-A)                           *
// ****************************************************************************

// ****************************************************************************
// *  Copyright 2017 Regents of the University of California                  *
// *  All rights reserved.                                                    *
// *                                                                          *
// *  Project director: Prof. Chenming Hu                                     *
// *                                                                          *
// *  Current developers: Dr. Pragya Kushwaha (Postdoc, UC Berkeley)          *
// *                      Yen-Kai Lin (Ph.D. student, UC Berkeley)            *
// *                      Juan Duarte (Ph.D. student, UC Berkeley)            *
// *                      Dr. Harshit Agarwal (Postdoc, UC Berkeley)          *
// *                      Dr. Huan-Lin Chang (Postdoc, UC Berkeley)           *
// ****************************************************************************

// ****************************************************************************
// *  Software is distributed as is, completely without warranty or service   *
// *  support. The University of California and its employees are not liable  *
// *  for the condition or performance of the software.                       *
// *                                                                          *
// *  The University of California owns the copyright and grants users a      *
// *  perpetual, irrevocable, worldwide, non-exclusive, royalty-free license  *
// *  with respect to the software as set forth below.                        *
// *                                                                          *
// *  The University of California hereby disclaims all implied warranties.   *
// *                                                                          *
// *  The University of California grants the users the right to modify,      *
// *  copy, and redistribute the software and documentation, both within      *
// *  the user's organization and externally, subject to the following        *
// *  restrictions:                                                           *
// *                                                                          *
// *  1. The users agree not to charge for the University of California code  *
// *     itself but may charge for additions, extensions, or support.         *
// *                                                                          *
// *  2. In any product based on the software, the users agree to             *
// *     acknowledge the University of California that developed the          *
// *     software. This acknowledgment shall appear in the product            *
// *     documentation.                                                       *
// *                                                                          *
// *  3. Redistributions to others of source code and documentation must      *
// *     retain the copyright notice, disclaimer, and list of conditions.     *
// *                                                                          *
// *  4. Redistributions to others in binary form must reproduce the          *
// *     copyright notice, disclaimer, and list of conditions in the          *
// *     documentation and/or other materials provided with the               *
// *     distribution.                                                        *
// *                                                                          *
// *  Agreed to on _________Nov. 21, 2017__________                           *
// *                                                                          *
// *  By: ____University of California, Berkeley___                           *
// *      ____Chenming Hu__________________________                           *
// *      ____Professor in Graduate School ________                           *
// ****************************************************************************

`define bsimimg_sp_global_variables \
    real spc, spA, veff, spb, kappa, invnVtm, gsp, b2sp; \
    real phifs, phibs, phifd, phibd, qtots, qtotd, ebs, ebd, eba;

`define bsimimg_sp_common(vgfb2eff, nVtm, Nc, epssi, epsratio, EOT1, EOT2, TSI, spA) \
begin: spcommon \
    real k1, k2; \
 \
    spb     = vgfb2eff / nVtm; \
    spA     = 2.0 * `q * Nc * nVtm / epssi; \
    k1      = lexp(0.5 * lln(spA)); \
    kappa   = (epsratio * EOT1) * k1; \
    spc     = spA * (epsratio * EOT1 / nVtm) * (epsratio * EOT1 / nVtm); \
    gsp     = lexp(0.5 * lln(spc)); \
    invnVtm = 1.0 / nVtm; \
    k2      = (gsp * gsp * nVtm * nVtm) / (epsratio * EOT1 * epsratio * EOT1); \
    b2sp    = (nVtm * nVtm) / (k2 * (TSI + epsratio * EOT2) * (TSI + epsratio * EOT2)); \
end

`define bsimimg_sp(block_name, vgfb1eff, vgfb2eff, vch, EOT1, EOT2, TSI, nVtm, spA, spc, spb, kappa, invnVtm, gsp, b2sp, epsratio, eb, phif1, phib1, qtot, CHARGEMOD) \
begin: block_name \
    real f, csi, cox21, ksi, kox; \
    real phif2, phib2; \
    real es1, es2; \
    real fg0, x1, x0; \
    real j, N_err, max_itr_NR, dfg0, dfg2; \
    integer flag_loop; \
    real GZP, GZP1; \
    real expphis1, field1, field2, spD, xoverA, rootx, betarootx, qtot_; \
    real theta20, tantheta; \
    real C, Csq; \
    real T0, T1; \
    real phis1; \
 \
    if (vgfb1eff > 0.0) \
        x0 = min(vgfb1eff, ((2.0 * nVtm) * (lln((vgfb1eff / kappa)) + vch * 0.5 / nVtm))); \
    else \
        x0 = vgfb1eff; \
 \
    fg0   = vgfb1eff - x0 - kappa * lexp(0.5 * invnVtm * (x0 - vch)); \
    dfg0  = -1.0 + 0.5 * invnVtm *(fg0 - vgfb1eff + x0); \
    dfg2  = invnVtm * invnVtm * 0.25 * (fg0 - vgfb1eff + x0); \
    x0    = x0 - 2.0 * fg0 * dfg0 / (2.0 * dfg0 * dfg0 - fg0 * dfg2); \
    fg0   = vgfb1eff - x0 - kappa * lexp(0.5 * invnVtm * (x0 - vch)); \
    dfg0  = -1.0 + 0.5 * invnVtm * (fg0 - vgfb1eff + x0); \
    dfg2  = invnVtm * invnVtm * 0.25 * (fg0 - vgfb1eff + x0); \
    x1    = x0 - 2.0 * fg0 * dfg0 / (2.0 * dfg0 * dfg0 - fg0 * dfg2); \
    GZP   = x1 * invnVtm; \
    csi   = epssi / TSI; \
    cox21 = epssi / (epsratio * EOT2); \
    ksi   = csi / (csi + cox21); \
    kox   = cox2 / (csi + cox21); \
    veff  = vgfb1eff / nVtm; \
    f     = vch * invnVtm; \
    flag_loop  = 0; \
    max_itr_NR = 4; \
    N_err      = 1e-9; \
    GZP1       = GZP; \
 \
    for (j = 0; j <= max_itr_NR && flag_loop == 0; j = j + 1) begin \
        T0   = (veff - GZP) / gsp; \
        T1   = sqrt(b2sp) * (spb - GZP); \
        x1   = lexp(GZP - f); \
        fg0  = T0 * T0 - T1 * T1 - x1; \
        dfg0 = (-2.0 / gsp) * T0 + 2.0 * sqrt(b2sp) * T1 - x1; \
        dfg2 = (2.0 / (gsp * gsp)) - 2.0 * b2sp - 0.1 * x1; \
        GZP1 = GZP - 2.0 * fg0 * dfg0 / (2.0 * dfg0 * dfg0 - fg0 * dfg2); \
 \
        if (abs(GZP - GZP1) <= N_err) begin \
            flag_loop = 1; \
        end else begin \
            GZP = GZP1; \
        end \
    end \
 \
    phif2 = GZP1; \
    phif1 = phif2 * nVtm; \
    phib2 = ksi * phif2 + kox * spb; \
    phib1 = nVtm * phib2; \
 \
    if (CHARGEMOD == 0) begin \
        /* CHARGE CALCULATION AS IN 102.0 (SOURABH'S MODEL)*/ \
        es1  = (vgfb1eff - phif1) / (epsratio * EOT1); \
        es2  = (phif1 - phib1) / TSI; \
        eb   = es2; \
        T0   = 0.5 * (phif2 - phib2) + 0.5 * sqrt((phif2 - phib2) * (phif2 - phib2) + 0.000004); \
        qtot = (2.0 * `q * Nc / (es1 + es2)) * nVtm * lexp(phib2 - f) * (lexp(T0) - 1.0); \
    end else begin \
        /* CHARGE CALCULATION AS IN 101.0 (DARSEN'S MODEL)*/ \
        phis1    = phif1; \
        expphis1 = lexp((phis1 - vch) / nVtm); \
        field1   = (vgfb1eff - phis1) / (epsratio * EOT1); \
        spD      = field1 * field1 - spA * expphis1; \
 \
        if (spD == 0.0) begin \
            T0     = sqrt(spA); \
            T1     = 1.0 / sqrt(expphis1) + T0 * TSI / (2.0 * nVtm); \
            field2 = T0 / T1; \
            qtot_  = epssi * (field1 - field2); \
        end else if (spD < 0.0) begin \
            xoverA    = -spD / spA; \
            rootx     = sqrt(-spD); \
            betarootx = rootx / nVtm; \
            T0        = min(sqrt(xoverA / expphis1), 1.0); \
            T1        = acos(T0); \
 \
            if (field1 > 0.0) begin \
                theta20 = abs(betarootx * TSI / 2.0 - T1); \
            end else begin \
                theta20 = betarootx * TSI / 2.0 + T1; \
            end \
 \
            tantheta = tan(theta20); \
            field2   = -rootx * tantheta; \
            qtot_    = epssi * (field1 - field2); \
        end else begin \
            /* sinh solution */ \
            xoverA    = spD / spA; \
            rootx     = sqrt(spD); \
            betarootx = rootx / nVtm; \
 \
            if (xoverA / expphis1 < 1.0e7) begin \
                T1 = 1.0 / (sqrt((xoverA / expphis1) + 1.0) + sqrt(xoverA / expphis1)); \
 \
                if (field1 > 0.0) begin \
                    T2 = lexp(-0.5 * betarootx * TSI); \
                end else begin \
                    T2 = lexp(0.5 * betarootx * TSI); \
                end \
 \
                C   = T1 * T2; \
                Csq = C * C; \
 \
                T1 = 2.0 * C / (1.0 - Csq); \
 \
                if (field1 > 0.0) begin \
                    field2 =  rootx * (1.0 + Csq) / (1.0 - Csq); \
                end else begin \
                    field2 = -rootx * (1.0 + Csq) / (1.0 - Csq); \
                end \
 \
                qtot_ = epssi * (field1 - field2); \
            end else begin \
                /* For numerical Stability */ \
                field2 = field1; \
                qtot_  = epssi * spA / (field1 + field1) * expphis1 * (1.0 - lexp(-TSI * field1 / nVtm)); \
            end \
        end \
 \
        /* sanity check */ \
        if (qtot_ < 0.0) begin \
            $strobe("Surface potential calculation error: qtot < 0 when Vgfb1eff = %1.6f, Vgfb2effs = %1.6f, vch = %1.6f", vgfb1eff, vgfb2eff, vch); \
        end \
 \
        /* Assign Variables */ \
        eb   = field2; \
        qtot = qtot_; \
    end \
end
