//! Generated by `gen_opcodes`, do not edit by hand.

use super::*;
#[derive(Clone, PartialEq, Eq, Copy, Hash)]
pub enum InstructionFormat {
    UnaryIeee64,
    UnaryInt,
    UnaryStr,
    UnaryBool,
    Unary,
    Binary,
    Jump,
    Call,
    Branch,
}
#[repr(u8)]
#[derive(Clone, PartialEq, Eq, Copy, Hash)]
pub enum Opcode {
    Fconst = 1u8,
    Iconst = 2u8,
    Sconst = 3u8,
    Bconst = 4u8,
    Inot = 5u8,
    Bnot = 6u8,
    Fneg = 7u8,
    Ineg = 8u8,
    FIcast = 9u8,
    IFcast = 10u8,
    BIcast = 11u8,
    IBcast = 12u8,
    FBcast = 13u8,
    BFcast = 14u8,
    Iadd = 15u8,
    Isub = 16u8,
    Imul = 17u8,
    Idiv = 18u8,
    Irem = 19u8,
    Ishl = 20u8,
    Ishr = 21u8,
    Ixor = 22u8,
    Inxor = 23u8,
    Iand = 24u8,
    Ior = 25u8,
    Fadd = 26u8,
    Fsub = 27u8,
    Fmul = 28u8,
    Fdiv = 29u8,
    Frem = 30u8,
    Ilt = 31u8,
    Igt = 32u8,
    Ige = 33u8,
    Ile = 34u8,
    Flt = 35u8,
    Fgt = 36u8,
    Fge = 37u8,
    Fle = 38u8,
    Ieq = 39u8,
    Feq = 40u8,
    Seq = 41u8,
    Beq = 42u8,
    Ine = 43u8,
    Fne = 44u8,
    Sne = 45u8,
    Bne = 46u8,
    Sqrt = 47u8,
    Exp = 48u8,
    Ln = 49u8,
    Log = 50u8,
    Clog2 = 51u8,
    Floor = 52u8,
    Ceil = 53u8,
    Sin = 54u8,
    Cos = 55u8,
    Tan = 56u8,
    Hypot = 57u8,
    Asin = 58u8,
    Acos = 59u8,
    Atan = 60u8,
    Atan2 = 61u8,
    Sinh = 62u8,
    Cosh = 63u8,
    Tanh = 64u8,
    Asinh = 65u8,
    Acosh = 66u8,
    Atanh = 67u8,
    Pow = 68u8,
    Jmp = 69u8,
    Call = 70u8,
    Brz = 71u8,
    Brnz = 72u8,
}
pub(super) const OPCODE_CONSTRAINTS: [OpcodeConstraints; 72usize + 1] = [
    OpcodeConstraints::new(0, 0),
    OpcodeConstraints::new(0u8, 1u8),
    OpcodeConstraints::new(0u8, 1u8),
    OpcodeConstraints::new(0u8, 1u8),
    OpcodeConstraints::new(0u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(1u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(2u8, 1u8),
    OpcodeConstraints::new(0u8, 0u8),
    OpcodeConstraints::new(0u8, 0u8),
    OpcodeConstraints::new(1u8, 0u8),
    OpcodeConstraints::new(1u8, 0u8),
];
pub(super) const OPCODE_NAMES: [&str; 72usize + 1] = [
    "", "fconst", "iconst", "sconst", "bconst", "inot", "bnot", "fneg", "ineg", "ficast", "ifcast",
    "bicast", "ibcast", "fbcast", "bfcast", "iadd", "isub", "imul", "idiv", "irem", "ishl", "ishr",
    "ixor", "inxor", "iand", "ior", "fadd", "fsub", "fmul", "fdiv", "frem", "ilt", "igt", "ige",
    "ile", "flt", "fgt", "fge", "fle", "ieq", "feq", "seq", "beq", "ine", "fne", "sne", "bne",
    "sqrt", "exp", "ln", "log", "clog2", "floor", "ceil", "sin", "cos", "tan", "hypot", "asin",
    "acos", "atan", "atan2", "sinh", "cosh", "tanh", "asinh", "acosh", "atanh", "pow", "jmp",
    "call", "brz", "brnz",
];
pub(super) const OPCODE_FORMAT: [InstructionFormat; 72usize + 1] = [
    InstructionFormat::Binary,
    InstructionFormat::UnaryIeee64,
    InstructionFormat::UnaryInt,
    InstructionFormat::UnaryStr,
    InstructionFormat::UnaryBool,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Unary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Binary,
    InstructionFormat::Jump,
    InstructionFormat::Call,
    InstructionFormat::Branch,
    InstructionFormat::Branch,
];
